#!/bin/bash
# onionGuard
# Verifies the operational status of the NSM services on each of the IDS machines. If a service has failed, this script will attempt to restart
# that service. If the service continues to fail, an alert email will be dispatched.
# Version: 1.02
# Author: Andrew Withers

usage()
{
cat <<EOF

Security Onion Status Monitor
Usage: onionGuard [HOSTNAME] or [OPTION] <HOSTNAME>

	Options:

		-d (<HOSTNAME>|ALL)       Disables status checking on the specified host
		-e (<HOSTNAME>|ALL)       Enables status checking on the specified host
		-s		      	Displays the enable/disable status summary
		-q 			Quiet. Non-interactive self-healing mode.
		-c			Configuration mode

EOF
}

load_var()
{
declare -Ag nodes
EMAIL=$(grep EMAIL /etc/onionGuard.conf | cut -d" " -f1 | cut -d"=" -f2)
SERVER=$(grep SERVER /etc/onionGuard.conf | cut -d'=' -f2)
while read line; do
	nodes["$(echo $line | cut -d'=' -f1)"]="$(echo $line | cut -d'=' -f2)"
done < <(tail -n +$(( $(grep -n Nodes /etc/onionGuard.conf | cut -d':' -f1) + 1 )) /etc/onionGuard.conf)
}

summary() {
# Reload variables in case of changes
load_var
for i in "${!nodes[@]}"; do
	if [[ ${nodes[$i]} == "1" ]]; then
		echo -e "$i: \e[32mEnabled\e[0m"
	else
		echo -e "$i: \e[91mDisabled\e[0m"
	fi
done
}

disable()
{
	OPTARG=${1^^}
	if [[ "$OPTARG" == "ALL" ]]; then
		sed -i "s/=1/=0/g" "/etc/onionGuard.conf"
		echo "Status checking has been disabled."
	else
		sed -i "s/$OPTARG=1/$OPTARG=0/" "/etc/onionGuard.conf"
	fi
	summary
}

enable()
{
	OPTARG="${1^^}"
	if [[ "$OPTARG" == "ALL" ]]; then
		sed -i "s/=0/=1/g" "/etc/onionGuard.conf"
		echo "Status checking has been enabled."
	else
		sed -i "s/$OPTARG=0/$OPTARG=1/" "/etc/onionGuard.conf"
	fi
	summary
}

config() {
SERVER="$HOSTNAME"
confirm=0
numNodes=0
declare hosts
echo "onionGuard configuration setup"
while [[ "$confirm" -eq 0 ]]; do
	read -p "Enter the email address where you would like to receive failure alerts: " EMAIL
	while ! [[ "$numNodes" =~ ^[1-9]+$ ]]; do
		read -p "How man sensor nodes will be monitored?: " numNodes
		if ! [[ "$numNodes" =~ ^[1-9]+$ ]]; then
			echo "Invalid entry. Try again."
		fi
	done
	for (( i=0; i < $numNodes; i++ )); do
		read -p "Enter the hostname of node $((i+1)): " hosts["$i"]
	done
	echo "Configuration: "
	echo "Email address: $EMAIL"
	echo "Server node: ${SERVER^^}"
	echo "Sensor node(s): "
	for i in "${hosts[@]}"; do
		echo "${i^^}"
	done
	read -p "Is this configuration correct? [y/N]: " answer
	if [[ ${answer,,} == 'y' ]]; then
		confirm=1
		echo "Generating onionGuard.conf"
	else
		echo "Lets try again"
	fi
done
cat <<EOF > /etc/onionGuard.conf
EMAIL="$EMAIL"
SERVER=${SERVER^^}

######### Nodes #########
${HOSTNAME^^}=1
EOF
for i in "${hosts[@]}"; do
	echo "${i^^}=1" >> /etc/onionGuard.conf
done
echo "Configuration complete"
}

quiet-check() {
exec 1>>/var/log/onionGuard.log
exec 2>>/var/log/onionGuard.err

# Load variables
load_var

for i in "${!nodes[@]}"; do
	if [[ ${nodes[$i]} == "1" ]]; then
		if [[ $i == "$SERVER" ]]; then
			if so-status | grep -q FAIL; then
				echo -e "\n$(date)"	# Adds date to log output
				so-restart
				sleep 5
				if so-status | grep -q FAIL; then
					printf "To: %s\nSubject: Security Onion Status Alert\nFrom: %s\n\n%s" "$EMAIL" "$HOSTNAME" "$(so-status | grep FAIL)" | sendmail -vt
				fi
			fi
		else
			salt "${i,,}" cmd.run "so-status" > /tmp/onionGuard.tmp
			if grep -q "Minion did not return" /tmp/onionGuard.tmp; then	# Minion cannot be reached. Wait 10 seconds and try again
				sleep 10
				salt "${i,,}" cmd.run "so-status" > /tmp/onionGuard.tmp
				if grep -q "Minion did not return" /tmp/onionGuard.tmp; then	# Minion cannot be reached. Dispatch an alert email
					printf "To: %s\nSubject: Security Onion Status Alert\nFrom: %s\n\n%s\n%s" "$EMAIL" "$HOSTNAME" "$(date)" "$(cat /tmp/onionGuard.tmp)" | sendmail -vt
				fi
			elif grep -q FAIL /tmp/onionGuard.tmp || grep -q stopped /tmp/onionGuard.tmp; then	# Check for stopped or failed processes and attempt to restart
				if grep -q stopped /tmp/onionGuard.tmp; then
					if  grep stopped /tmp/onionGuard.tmp | grep -q "so-autossh"; then
						echo -e "\n$(date)"
						salt "${i,,}" cmd.run "so-autossh-restart"
					fi
					if grep stopped /tmp/onionGuard.tmp | grep -vq so-autossh; then
							echo -e "\n$(date)"
							salt "${i,,}" cmd.run "so-bro-restart"
					fi
				fi
				if grep -q FAIL /tmp/onionGuard.tmp; then
					for ((c=1; c<=$(grep -c FAIL /tmp/onionGuard.tmp);c++)); do
						FAILEDPS="$(grep FAIL /tmp/onionGuard.tmp | head -n$c | tail -n1)"
						if echo "$FAILEDPS" | grep -q "ossec_agent"; then
							echo -e "\n$(date)"
							salt "${i,,}" cmd.run "so-ossec-agent-restart"
						elif echo "$FAILEDPS" | grep -q "netsniff-ng"; then
							echo -e "\n$(date)"
							salt "${i,,}" cmd.run "so-pcap-restart"
						elif echo "$FAILEDPS" | grep -q "pcap_agent"; then
							echo -e "\n$(date)"
							salt "${i,,}" cmd.run "so-pcap-agent-restart"
						elif echo "$FAILEDPS" | grep -q "snort_agent"; then
							echo -e "\n$(date)"
							salt "${i,,}" cmd.run "so-nids-agent-restart"
						elif echo "$FAILEDPS" | grep -q "suricata \| snort"; then
							echo -e "\n$(date)"
							salt "${i,,}" cmd.run "so-nids-restart"
						elif echo "$FAILEDPS" | grep -q "barnyard2"; then
							echo -e "\n$(date)"
							salt "${i,,}" cmd.run "so-barnyard-restart"
						elif echo "$FAILEDPS" | grep -q "so-elasticsearch"; then
							echo -e "\n$(date)"
							salt "${i,,}" cmd.run "so-elasticsearch-restart"
						elif echo "$FAILEDPS" | grep -q "so-logstash"; then
							echo -e "\n$(date)"
							salt "${i,,}" cmd.run "so-logstash-restart"
						elif echo "$FAILEDPS" | grep -q "so-curator"; then
							echo -e "\n$(date)"
							salt "${i,,}" cmd.run "so-curator-restart"
						else
							echo "$(date): Unable to restart unrecognized failed process: $FAILEDPS" >> /var/log/onionGuard.err
							echo -e "\n$(date)"
							so-restart 	# If the failed process(es) cannot be identified then restart all security onion processes
							break
						fi
					done
				fi
				sleep 5
				# Recheck the status of all processes and dispatch an alert email if necessary
				salt "${i,,}" cmd.run "so-status" > /tmp/onionGuard.tmp
				if  grep -q FAIL /tmp/onionGuard.tmp || grep -q stopped /tmp/onionGuard.tmp; then
					printf "To:%s\nSubject: Security Onion status alert!\nFrom:%s\n\n%s\nOne or more Security Onion processes has failed!\n%s" \
					"$EMAIL" "$HOSTNAME" "$(date)" "$(cat /tmp/onionGuard.tmp)" | sendmail -vt
				fi
			fi
		fi
	fi
done
if [[ -e /tmp/onionGuard.tmp ]]; then
	rm /tmp/onionGuard.tmp
fi
}

if ! [[ -f /etc/onionGuard.conf ]]; then
	config
fi

# Parse options
while getopts ":hd:e:sqc" OPT; do
	case $OPT in
	h)
		usage
		exit
		;;
	d)
		disable "$OPTARG"
		exit
		;;
	e)
		enable "$OPTARG"
		exit
		;;
	s)
		summary
		exit
		;;
	q)
		quiet-check
		exit
		;;
	c)
		config
		exit
		;;
	\?)
		echo "Invalid option: -$OPTARG"
		usage
		exit 1
		;;
	:)
		echo "Option -$OPTARG requires an argument."
		usage
		exit 1
		;;
	esac
done
# Load variables
load_var

HOST="$1"
HOST="${HOST^^}"
if [[ "$HOST" == "" ]]; then
	if [[ -f /tmp/onionGuard.tmp ]]; then
		rm /tmp/onionGuard.tmp
	fi
	for i in "${!nodes[@]}"; do
		if [[ $i == "$SERVER" ]]; then
			echo "${i,,}:" >> /tmp/onionGuard.tmp
			so-status >> /tmp/onionGuard.tmp
		else
			salt "${i,,}" cmd.run "so-status" >> /tmp/onionGuard.tmp
		fi
	done
elif [[ ${nodes[$HOST]} ]]; then
	if [[ $HOST == "$SERVER" ]]; then
		echo "${HOST,,}:" > /tmp/onionGuard.tmp
		so-status >> /tmp/onionGuard.tmp
	else
		salt "${HOST,,}" cmd.run "so-status" > /tmp/onionGuard.tmp
	fi
else
	echo "Invalid host" > /tmp/onionGuard.tmp
fi
sed -i 's/OK/\\e[92m&\\e[0m/g' "/tmp/onionGuard.tmp"
sed -i 's/running/\\e[92m&\\e[0m/g' "/tmp/onionGuard.tmp"
sed -i 's/FAIL/\\e[91m&\\e[0m/g' "/tmp/onionGuard.tmp"
sed -i 's/stopped/\\e[91m&\\e[0m/g' "/tmp/onionGuard.tmp"
echo -e "$(cat /tmp/onionGuard.tmp)"

if [[ -e /tmp/onionGuard.tmp ]]; then
	rm /tmp/onionGuard.tmp
fi
exit
