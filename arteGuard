#!/bin/bash
# arteGuard
# Description: arteGuard retrieves the operational status of artemis on each of the IDS sensors. If artemis is not running,
# arteGuard will attempt to restart the service. If the service cannot be restarted, an alert email will be dispatched.
# Author: Andrew Withers

usage()
{
cat <<EOF

ArteGuard: Artemis Status Monitor
Usage: arteGuard [HOSTNAME] or [OPTION] <HOSTNAME>

	Options:

		-d (<HOSTNAME>|ALL)	Disables status checking on the specified host
		-e (<HOSTNAME>|ALL) 	Enables status checking on the specified host
		-s			Displays the enable/disable status summary
		-q			Quiet. Non-interactive self-healing mode
		-c 			Configuration mode

EOF
}

load_var() {
declare -Ag nodes
EMAIL=$(grep EMAIL /etc/arteGuard.conf | cut -d" " -f1 | cut -d"=" -f2)
SCANNER=$(grep SCANNER /etc/arteGuard.conf | cut -d'=' -f2)
# Add node name as key and status as value in nodes array
while read line; do
	nodes["$(echo $line | cut -d'=' -f1)"]="$(echo $line | cut -d'=' -f2)"
done < <(tail -n +$(( $(grep -n Nodes /etc/arteGuard.conf | cut -d':' -f1) + 1 )) /etc/arteGuard.conf)
}

summary() {
# Reload variables in case of changes
load_var

for i in "${!nodes[@]}"; do
	if [[ "${nodes[$i]}" == "1" ]]; then
		echo -e "$i: \e[32mEnabled\e[0m"
	else
		echo -e "$i: \e[91mDisabled\e[0m"
	fi
done
}

disable()
{
        OPTARG=${1^^}
        if [[ "$OPTARG" == "ALL" ]]; then
                sed -i "s/=1/=0/g" "/etc/arteGuard.conf"
                echo "Status checking has been disabled."
        else
                sed -i "s/$OPTARG=1/$OPTARG=0/" "/etc/arteGuard.conf"
        fi
        summary
}

enable()
{
        OPTARG="${1^^}"
        if [[ "$OPTARG" == "ALL" ]]; then
                sed -i "s/=0/=1/g" "/etc/arteGuard.conf"
                echo "Status checking has been enabled."
        else
                sed -i "s/$OPTARG=0/$OPTARG=1/" "/etc/arteGuard.conf"
        fi
        summary
}

config() {
SCANNER="$HOSTNAME"
confirm=0
numNodes=-1
declare hosts
echo "arteGuard configuration setup"
while [[ "$confirm" -eq 0 ]]; do
	read -p "Enter the email address where you would like to receive failure alerts: " EMAIL
	while ! [[ "$numNodes"  =~ ^[0-9]+$ ]] || [[ "$numNodes" -lt 0 ]]; do
		read -p "How many forwarding nodes will be monitored?: " numNodes
		if ! [[ "$numNodes"  =~ ^[0-9]+$ ]] || [[ "$numNodes" -lt 0 ]]; then
			echo "Invalid entry. Try again."
		fi
	done
	for (( i=0; i < $numNodes; i++ )); do
		read -p "Enter the hostname of node $((i+1)): " hosts["$i"]
	done
	echo "Configuration: "
	echo "Email address: $EMAIL"
	echo "Scanner node: ${SCANNER^^}"
	echo "Forwarding nodes: "
	for i in "${hosts[@]}"; do
		echo "${i^^}"
	done
	read -p "Is this configuration correct? [y/N]: " answer
	if [[ ${answer,,} == 'y' ]]; then
		confirm=1
		echo "Generating arteGuard.conf"
	else
		echo "Lets try again"
	fi
done
cat <<EOF > /etc/arteGuard.conf
EMAIL=$EMAIL
SCANNER=${SCANNER^^}

######### Nodes #########
${HOSTNAME^^}=1
EOF
for i in "${hosts[@]}"; do
	echo "${i^^}=1" >> /etc/arteGuard.conf
done
echo "Configuration complete"
}


quiet-check()
{
exec 1>>/var/log/arteGuard.log
exec 2>>/var/log/arteGuard.err

# Load variables
load_var

for i in "${!nodes[@]}"; do
	if [[ ${nodes[$i]} == "1" ]]; then
		if [[ $i == "$SCANNER" ]]; then
			if service artemis status | grep -q "dead"; then
				service artemis start
				if service artemis status | grep -q "dead"; then
					printf "To: %s\nSubject: Artemis Status Alert\nFrom: %s\n\n%s\n%s: Artemis scanner is inactive." "$EMAIL" "$HOSTNAME" "$(date)" "$i" | sendmail -vt
				fi
			fi
		else
			if salt "$i" cmd.run "service artemis-forwarder status" | grep -q "dead"; then
				salt "$i" cmd.run "service artemis-forwarder start"
				if salt "$i" cmd.run "service artemis-forwarder status" | grep -q "dead"; then
					printf "To: %s\nSubject: Artemis Status Alert\nFrom: %s\n\n%s\n%s: Artemis-forwarder is inactive." "$EMAIL" "$HOSTNAME" "$(date)" "$i" | sendmail -vt
				fi
			fi
		fi
	fi
done
}

# Ensure that arteGuard has been configured
if ! [[ -f /etc/arteGuard.conf ]]; then
	config
fi

# Parse options
while getopts ":hd:e:sqc" OPT; do
        case $OPT in
        h)
                usage
                exit
                ;;
        d)
                disable "$OPTARG"
                exit
                ;;
        e)
                enable "$OPTARG"
                exit
                ;;
        s)
                summary
                exit
                ;;
        q)
                quiet-check
                exit
                ;;
        c)
		config
		exit
		;;
	\?)
                echo "Invalid option: -$OPTARG"
                usage
		exit 1
                ;;
        :)
                echo "Option -$OPTARG requires an argument."
                usage
		exit 1
		;;
        esac
done

# Load variables
load_var

HOST="${1^^}"
if [[ -z "$HOST" ]]; then
        if [[ -e /tmp/arteGuard.tmp ]]; then
		rm /tmp/arteGuard.tmp
	fi
	for i in "${!nodes[@]}"; do
		if [[ $i == "$SCANNER" ]]; then
			echo "$i:" >> /tmp/arteGuard.tmp
			service artemis status >> /tmp/arteGuard.tmp
		else
			salt "${i,,}" cmd.run "service artemis-forwarder status" >> /tmp/arteGuard.tmp
		fi
	done
elif [[ ${nodes[$HOST]} ]]; then
	if [[ $HOST == "$SCANNER" ]]; then
		echo "$HOST:" > /tmp/arteGuard.tmp
		service artemis status >> /tmp/arteGuard.tmp
	else
		salt "${HOST,,}" cmd.run "service artemis-forwarder status" > /tmp/arteGuard.tmp
	fi
else
	echo "Invalid host" > /tmp/arteGuard.tmp
fi
sed -i 's/dead/\\e[91m&\\e[0m/g' "/tmp/arteGuard.tmp"
sed -i 's/ active /\\e[92m&\\e[0m/g' "/tmp/arteGuard.tmp"
echo -e "$(cat /tmp/arteGuard.tmp)"	# using echo -e interprets the color codes rather than printing them

if [[ -e /tmp/arteGuard.tmp ]]; then
        rm /tmp/arteGuard.tmp
fi
exit
